name: Build packages

concurrency:
  group: build-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
  pull_request:
  release:
    types:
    - published

jobs:
  build_packages:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        arch:
        - [armhf, arm-linux-gnueabihf-gcc, arm-linux-gnueabihf-g++, arm-linux-gnueabihf, /usr/arm-linux-gnueabihf]
        package_type:
        - deb
        build_type:
        - ""
        - "-sqlite"
        - "-msquic"
        - "-full"
        - "-full-debug"

    steps:
    - name: install toolchains
      run: |
        sudo apt update
        sudo chmod 755 /usr/local/bin
        sudo apt install -y g++-aarch64-linux-gnu gcc-aarch64-linux-gnu
        sudo apt install -y g++-mips-linux-gnu gcc-mips-linux-gnu
        sudo apt install -y g++-riscv64-linux-gnu gcc-riscv64-linux-gnu
        sudo apt install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        sudo apt install -y gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
        sudo apt install -y cmake ninja-build rpm checkinstall
        sudo sed -i 's/Version: ${VERSION}-${RELEASE}/Version: ${VERSION}/g' $(which checkinstall)
        sudo sed -i 's/-${RELEASE}_${ARCHITECTURE}/_${ARCHITECTURE}/g' $(which checkinstall)
        sudo apt install -y pip
        pip install Jinja2
        sudo apt-get install pkg-config

    - name: install mbed-tls
      run: |
        set -eu
        git clone https://github.com/Mbed-TLS/mbedtls.git && cd mbedtls &&  git checkout tags/v3.3.0
        mkdir build && cd build
        cmake -DCMAKE_C_COMPILER=${{ matrix.arch[1] }} -DCMAKE_CXX_COMPILER=${{ matrix.arch[2] }} -DENABLE_TESTING=OFF ..
        cmake --build .
        sudo make install
        cd ../ && rm -rf ./build
        cd ../
    
    - name: install libmysqlclient
      if: matrix.arch[0] != 'mips'
      run: |
        set -eu
        wget https://downloads.mysql.com/archives/get/p/19/file/mysql-connector-c-6.1.5-src.tar.gz
        tar -zxvf mysql-connector-c-6.1.5-src.tar.gz
        cd mysql-connector-c-6.1.5-src && mkdir build && cd build
        cmake ..
        cmake --build .
        rm CMakeCache.txt 
        cmake -DCMAKE_C_COMPILER=${{ matrix.arch[1] }} -DCMAKE_CXX_COMPILER=${{ matrix.arch[2] }}   -DCMAKE_INSTALL_PREFIX=${{ matrix.arch[4] }}   \
        -DCMAKE_PREFIX_PATH=${{ matrix.arch[4] }} ..
        cmake --build .
        sudo make install
        cd ../ && rm -rf ./build
        cd ../

    - name: install uuid
      if: matrix.arch[0] != 'riscv64' &&  matrix.arch[0] != 'x86_64'  &&  matrix.arch[0] != 'amd64'
      run: |
        set -eu
        wget https://sourceforge.net/projects/libuuid/files/libuuid-1.0.3.tar.gz/download -O libuuid-1.0.3.tar.gz 
        tar zxf libuuid-1.0.3.tar.gz 
        cd  libuuid-1.0.3 
        mkdir build 
        cd build  
        ../configure --prefix=${{ matrix.arch[4] }} --host=${{ matrix.arch[3] }} 
        sudo make install 
        cd ../ && sudo rm -rf ./build
        cd ../

    - name: install zeromq
      if: matrix.arch[0] != 'riscv64'
      run: |
        wget https://github.com/zeromq/libzmq/releases/download/v4.3.4/zeromq-4.3.4.tar.gz 
        tar zxf zeromq-4.3.4.tar.gz 
        cd zeromq-4.3.4 
        mkdir build 
        cd build 
        cmake -DBUILD_SHARED=OFF      \
        -DCMAKE_C_COMPILER=${{ matrix.arch[1] }}    \
        -DCMAKE_CXX_COMPILER=${{ matrix.arch[2] }}   \
        -DCMAKE_INSTALL_PREFIX=${{ matrix.arch[4] }}   \
        -DCMAKE_STAGING_PREFIX=${{ matrix.arch[4] }}   \
        -DCMAKE_PREFIX_PATH=${{ matrix.arch[4] }} \
        -DZMQ_BUILD_TESTS=OFF      \
        -DENABLE_CPACK=OFF      \
        -DWITH_DOC=OFF     \
        -DCMAKE_BUILD_TYPE=Release     \
        -DCMAKE_CROSSCOMPILING=ON \
        -DWITH_LIBBSD=OFF .. 
        sudo make install 
        cd ../
        rm -rf ./build
        cd ../
        
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - run: git submodule update --init --recursive

    - name: prepare
      id: prepare
      run: |
        arch="${{ matrix.arch[0] }}"
        if [ "$arch" == "amd64" ] && [ "${{ matrix.package_type }}" == "rpm" ]; then
          arch="x86_64"
        fi

        pkg_name="nanomq-$(git describe --abbrev=0 --tags)-linux-${arch}${{ matrix.build_type }}.${{ matrix.package_type }}"

        make_flags="-DCMAKE_C_COMPILER=${{ matrix.arch[1] }} -DCMAKE_CXX_COMPILER=${{ matrix.arch[2] }} -DNNG_ENABLE_TLS=ON"
       
        if [ "${{ matrix.build_type }}" == "-sqlite" ] || [ "${{ matrix.build_type }}" == "-full" ] || [ "${{ matrix.build_type }}" == "-full-debug" ]; then
          make_flags+=" -DNNG_ENABLE_SQLITE=ON "
        fi
        
        if [ "${{ matrix.build_type }}" == "-msquic" ] || [ "${{ matrix.build_type }}" == "-full" ] || [ "${{ matrix.build_type }}" == "-full-debug" ]; then
          make_flags+=" -DNNG_ENABLE_QUIC=ON "
          make_flags+=" -DNNG_ENABLE_SQLITE=ON "
          make_flags+=" -DQUIC_BUILD_SHARED=OFF "
          if [ "$arch" != "x86_64" ] && [ "$arch" != "amd64" ]; then
            make_flags+=" -DONEBRANCH=1 "
            make_flags+=" -DCMAKE_CROSSCOMPILING=ON "
            make_flags+=" -DCMAKE_PREFIX_PATH=${{ matrix.arch[4] }} "
            if [ "$arch" == "arm64" ]; then
              make_flags+=" -DCMAKE_TARGET_ARCHITECTURE=arm64 "
              make_flags+=" -DGNU_MACHINE=aarch64-linux-gnu "
              make_flags+=" toolchains $PWD/nng/extern/msquic/cmake/toolchains/aarch64-linux.cmake "
            elif [ "$arch" == "armhf" ]; then
              make_flags+=" -DCMAKE_TARGET_ARCHITECTURE=arm "
              make_flags+=" toolchains $PWD/nng/extern/msquic/cmake/toolchains/arm-linux.cmake "
              make_flags+=" -DGNU_MACHINE=arm-linux-gnueabihf "
            fi
          fi
        fi

        if [ "${{ matrix.build_type }}" == "-full" ] || [ "${{ matrix.build_type }}" == "-full-debug" ]; then
          if [ "$arch" != "mips" ] ; then
            make_flags+=" -DENABLE_MYSQL=ON "
          fi
          make_flags+=" -DENABLE_RULE_ENGINE=ON "
          make_flags+=" -DENABLE_JWT=ON "
          make_flags+=" -DBUILD_ZMQ_GATEWAY=ON "
          make_flags+=" -DBUILD_BENCH=ON "
        fi

        if [ "${{ matrix.build_type }}" == "-full-debug" ]; then
          make_flags+=" -DCONFIG_MXCHIP_DEBUG=1 "
        fi

        echo "arch=${arch}" >> $GITHUB_OUTPUT
        echo "pkg_name=${pkg_name}" >> $GITHUB_OUTPUT
        echo "make_flags=${make_flags}" >> $GITHUB_OUTPUT

    - name: build
      run: |
        set -eu

        mkdir -p build
        cd build
        cmake ${{ steps.prepare.outputs.make_flags }} ..
        make
        sudo make install
    - name: build deb
      if: matrix.package_type == 'deb'
      run: |
        set -eu
        cd build
        mkdir -p _packages
        sudo checkinstall --backup=no --install=no --type=debian --arch=${{ steps.prepare.outputs.arch }} --pkgname=nanomq --pkgversion=$(git rev-parse --short HEAD) --pkggroup=EMQX --maintainer=EMQX --provides=EMQX --pakdir _packages --recommends=1 --suggests=1 -y
        sudo mv _packages/nanomq_$(git rev-parse --short HEAD)_${{ steps.prepare.outputs.arch }}.deb _packages/${{ steps.prepare.outputs.pkg_name }}
        cd _packages; echo $(sha256sum ${{ steps.prepare.outputs.pkg_name }} | awk '{print $1}') > ${{ steps.prepare.outputs.pkg_name }}.sha256

    - uses: actions/upload-artifact@v3
      with:
        name: packages
        path: "build/_packages/*"
    - uses: Rory-Z/upload-release-asset@v1
      if: github.event_name == 'release'
      with:
        owner: ${{ github.repository_owner }}
        repo: nanomq
        token: ${{ github.token }}
        path: "build/_packages/nanomq*"
        ref: ${{ github.ref }}
